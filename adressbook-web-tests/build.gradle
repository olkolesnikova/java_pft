import org.gradle.api.tasks.testing.Test

apply plugin: 'java'


repositories {
    mavenCentral()
}

configurations {
    agent
}

dependencies {
    implementation 'org.testng:testng:6.9.10'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.14.0'
    implementation 'org.hamcrest:hamcrest:2.2'
    implementation 'com.beust:jcommander:1.78'
    implementation 'com.thoughtworks.xstream:xstream:1.4.11.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'ch.qos.logback:logback-classic:1.3.0-alpha5'
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.19'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.4.12.Final'
    agent "org.aspectj:aspectjweaver:1.8.0"
    compile "ru.yandex.qatools.allure:allure-testng-adaptor:1.4.0.RC4"
}

test {
    useTestNG {

        if (project.hasProperty('target')) {
            systemProperty('target', "${target}")
        }
    }
}

task testGroups (type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-groups.xml'
    }
    if (project.hasProperty('target')) {
        systemProperty('target', "${target}")
    }
    if (project.hasProperty('browser')) {
        systemProperty('browser', "${browser}")
    }

    if (project.hasProperty('verifyUI')) {
        systemProperty('verifyUI', "${verifyUI}")
    }

    if (project.hasProperty('platform')) {
        systemProperty('platform', "${platform}")
    }
}

testGroups.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

task testContacts (type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-contacts.xml'
    }
    if (project.hasProperty('target')) {
        systemProperty('target', "${target}")
    }
    if (project.hasProperty('browser')) {
        systemProperty('browser', "${browser}")
    }

    if (project.hasProperty('verifyUI')) {
        systemProperty('verifyUI', "${verifyUI}")
    }

    if (project.hasProperty('platform')) {
        systemProperty('platform', "${platform}")
    }

}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}